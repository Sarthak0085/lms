// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
  status                UserStatus             @default(ACTIVE)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now())
  categories            Category[]
  questions             Question[]
  answer                Answer[]
  certificates          Certificate[]
  bookmarks             Bookmark[]
  votes                 Vote[]
  videoProgress         VideoProgress[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key relation
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model FAQ {
  id       String @id @default(cuid())
  question String
  answer   String
}

model Banner {
  id       String @id @default(cuid())
  image    String
  title    String
  subTitle String
}

model Course {
  id             String         @id @default(cuid())
  name           String
  description    String
  price          Float
  estimatedPrice Float?
  thumbnail      String
  tags           String
  categories     String
  level          Level          @default(BEGINNER)
  demoUrl        String
  ratings        Float          @default(0)
  purchased      Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  content        Content[]
  benefits       Benefit[]
  prerequisites  Prerequisite[]
  reviews        Review[]
  certificate    Certificate[]

  @@map("courses")
}

model Benefit {
  id       String @id @default(cuid())
  title    String
  courseId String
  Course   Course @relation(fields: [courseId], references: [id])
}

model Prerequisite {
  id       String @id @default(cuid())
  title    String
  courseId String
  Course   Course @relation(fields: [courseId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  courseId  String
  isPinned  Boolean  @default(false)
  Course    Course   @relation(fields: [courseId], references: [id])
}

model Certificate {
  id       String @id @default(cuid())
  slug     String @default("certId")
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@unique([userId, courseId])
}

model Content {
  id               String          @id @default(cuid())
  type             String          @default("folder")
  title            String
  hidden           Boolean         @default(false)
  description      String?
  thumbnail        String?
  parentId         String?
  parent           Content?        @relation("ContentToContent", fields: [parentId], references: [id])
  videoProgress    VideoProgress[]
  children         Content[]       @relation("ContentToContent")
  createdAt        DateTime        @default(now())
  markAsCompleted  Boolean         @default(false)
  VideoMetadata    VideoMetadata?
  NotionMetadata   NotionMetadata?
  notionMetadataId Int?
  questions        Question[]
  commentsCount    Int             @default(0)
  bookmark         Bookmark[]
  Course           Course?         @relation(fields: [courseId], references: [id])
  courseId         String?
}

model NotionMetadata {
  id        String  @id @default(cuid())
  contentId String
  content   Content @relation(fields: [contentId], references: [id])
  notionId  String

  @@unique([contentId])
}

model VideoMetadata {
  id           String      @id @default(cuid())
  muxAssetId   String      @unique
  playbackUrl  String
  thumbnailUrl String?
  duration     Int?
  status       VideoStatus @default(PROCESSING)
  contentId    String
  content      Content     @relation(fields: [contentId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([contentId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   Content  @relation(fields: [contentId], references: [id])
  createdAt DateTime @default(now())
}

model VideoProgress {
  id               Int      @id @default(autoincrement())
  userId           String
  contentId        String
  currentTimestamp Int
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content          Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  updatedAt        DateTime @default(now()) @updatedAt

  @@unique([contentId, userId])
}

model Question {
  id           String   @id @default(cuid())
  content      String
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  upvotes      Int      @default(0)
  downvotes    Int      @default(0)
  totalanswers Int      @default(0)
  answers      Answer[]
  votes        Vote[]
  contentId    String
  onContent    Content  @relation(fields: [contentId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([authorId])
}

model Answer {
  id           String   @id @default(cuid())
  content      String
  question     Question @relation(fields: [questionId], references: [id])
  questionId   String
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  votes        Vote[]
  upvotes      Int      @default(0)
  downvotes    Int      @default(0)
  totalanswers Int      @default(0)
  parentId     String?
  responses    Answer[] @relation("AnswerToAnswer")
  parent       Answer?  @relation("AnswerToAnswer", fields: [parentId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([questionId])
  @@index([authorId])
  @@index([parentId])
}

model Vote {
  id         String    @id @default(cuid())
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id])
  answerId   String?
  answer     Answer?   @relation(fields: [answerId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  voteType   VoteType
  createdAt  DateTime  @default(now())

  @@unique([questionId, userId])
  @@unique([answerId, userId])
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  BLOCK
  ACTIVE
  ARCHIEVED
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum PostType {
  QUESTION
  ANSWER
}

enum VideoStatus {
  PROCESSING
  FAILED
  READY
}
